#!/usr/bin/env php
<?php

$blocks = json_decode(file_get_contents('php://stdin'));
$out    = '';
$indent = '   ';
$level  = 0;

if (null === $blocks) {
    exit(1);
}

foreach ($blocks as $block) {

    if ($block->isPrivate) {
        continue;
    }

    if (in_array($block->type, array('function', 'namespace'))) {
        $level = 0;
    } else {
        $level = 1;
    }

    $prefix = str_repeat($indent, $level);

    if (!in_array($block->type, array('function', 'namespace', 'class', 'interface'))) {
        $out .= $prefix;
    }

    if ("variable" === $block->type) {
        $out .= ".. php:attr:: ".$block->name."\n\n";
    } elseif ("constant" === $block->type) {
        $out .= ".. php:const:: ".$block->name."\n\n";
    } else {
        $out .= ".. php:".$block->type.":: ".$block->name."\n\n";
    }

    // no description for namespace
    if ("namespace" === $block->type) {
        continue;
    }

    if (!empty($block->description)) {
        // escape slashes
        $description = str_replace("\\", "\\\\", $prefix.$indent.$block->description);
        // indent new lines
        $description = preg_replace('/([\\n\\r]+)/', '$1'.$prefix.$indent, $description);

        $out .= $description."\n\n";
    }

    foreach ($block->tags as $tag) {
        if ("param" !== $tag->type) {
            $out .= "\n";
        }

        $out .= $prefix.$indent.":".$tag->type;

        if ("return" === $tag->type) {
            $out .= "s";
        }

        if ("param" !== $tag->type) {
            $out .= ":";
        }

        if (isset($tag->types)) {
            $out .= " ".str_replace("\\", "\\\\", implode("|", $tag->types));
        }

        if (isset($tag->name)) {
            $out .= " $".$tag->name;
        }

        if ("param" === $tag->type) {
            $out .= ":";
        }

        if (isset($tag->description)) {
            $lines = str_replace("\\", "\\\\", explode("\n", $tag->description));
            $out .= " ".$lines[0];
        }

        $out .= "\n";
    }
    $out .= "\n";
}

echo trim(str_replace("\n\n\n", "\n\n", $out));